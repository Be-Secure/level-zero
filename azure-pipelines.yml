trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRepoFull: $(dockerNamespace)/$(dockerRepo)
  refSlug: $[ lower(replace(variables['Build.SourceBranch'], '/', '-')) ]
  mainBranch: master
  isMain: $[eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['mainBranch']))]
  DOCKER_BUILDKIT: 1

jobs:
- job: ubuntu_bionic_install
  variables:
    buildPlatform: ubuntu-bionic
    IMAGE_VERSION: bionic-20200807
  steps:
  - task: Docker@2
    displayName: Login to Docker Hub
    inputs:
      command: login
      containerRegistry: DockerHub
  - task: Docker@2
    displayName: Build container
    inputs:
      command: build
      Dockerfile: docker/build-ubuntu.Dockerfile
      repository: $(dockerRepoFull)
      tags: level-zero-toolchain-$(buildPlatform)-$(refSlug)
      arguments:
        --cache-from $(dockerRepoFull):level-zero-toolchain-$(buildPlatform)-refs-heads-$(mainBranch)
        --build-arg BUILDKIT_INLINE_CACHE=1
        --build-arg IMAGE_VERSION
  - task: Docker@2
    displayName: Push build image to registry cache if on main branch
    inputs:
      command: push
      repository: $(dockerRepoFull)
      tags: level-zero-toolchain-$(buildPlatform)-$(refSlug)
    condition: and(succeeded(), eq(variables.isMain, true))
  - script: |
      mkdir $(Build.Repository.LocalPath)/ccache
      mkdir $(Build.Repository.LocalPath)/build
      mkdir $(Build.Repository.LocalPath)/install
  - task: Cache@2
    displayName: ccache
    inputs:
      key: ccache | $(Agent.OS) | "$(Build.Repository.ID)" | $(Build.SourceVersion)
      path: $(Build.Repository.LocalPath)/ccache
      restoreKeys: ccache | $(Agent.OS) | "$(Build.Repository.ID)"
  - task: Docker@2
    displayName: CMake configure in container
    inputs:
      command: run
      arguments:
        --rm
        -v $(Build.Repository.LocalPath):/project
        -w /project/build
        -e CCACHE_DIR=/project/ccache
        -e CCACHE_BASEDIR=/project
        $(dockerRepoFull):level-zero-toolchain-$(buildPlatform)-$(refSlug)
        cmake
          -G Ninja
          -D CMAKE_BUILD_TYPE=Release
          -D CMAKE_C_COMPILER_LAUNCHER=ccache
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_INSTALL_PREFIX=/project/install
          ..
  - task: Docker@2
    displayName: CMake build in container
    inputs:
      command: run
      arguments:
        --rm
        -v $(Build.Repository.LocalPath):/project
        -w /project/build
        -e CCACHE_DIR=/project/ccache
        -e CCACHE_BASEDIR=/project
        $(dockerRepoFull):level-zero-toolchain-$(buildPlatform)-$(refSlug)
        cmake --build . --target install
  - task: PublishPipelineArtifact@1
    displayName: Publish level-zero artifact
    inputs:
      targetPath: $(Build.Repository.LocalPath)/install
      artifactName: level-zero-$(buildPlatform)-install
    condition: and(succeeded(), eq(variables.isMain, true))
